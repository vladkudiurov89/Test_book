from keras.models import Sequential
from keras.layers import Dense
from keras.utils import np_utils

from keras.datasets import mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

y_train = np_utils.to_categorical(y_train, 10)
y_test = np_utils.to_categorical(y_test, 10)

x_train = x_train.reshape([-1, 28*28]) / 255.
x_test = x_test.reshape([-1, 28*28]) / 255.


def create_model(init):
    model = Sequential()
    model.add(Dense(10, input_shape=(28*28,), init=init, activation='tanh'))
    model.add(Dense(10, init=init, activation='tanh'))
    model.add(Dense(10, init=init, activation='tanh'))
    model.add(Dense(10, init=init, activation='tanh'))
    model.add(Dense(10, init=init, activation='softmax'))
    return model


print(x_test.shape)
print(x_train.shape)
print(y_test.shape)
print(y_train.shape)

uniform_model = create_model('uniform')
uniform_model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])
uniform_model.fit(x_train, y_train, batch_size=64, epochs=30, verbose=1, validation_data=(x_test, y_test))

glorot_model = create_model('glorot_normal')
glorot_model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])
glorot_model.fit(x_train, y_train, batch_size=64, epochs=30, verbose=1, validation_data=(x_test, y_test))
